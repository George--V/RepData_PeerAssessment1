colnames(myData)<-cnames
myData
myVector<-1:20
myVector
dim(myVector)
length(myVector)
dim(myVector<-c(4,5)
dim(myVector)<-c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix<-myVector
?matrix
myMatrix2<-matrix(data=1:20, nrow=4, ncol=5)
identical(myMatrix, myMatrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients, myMatrix)
myData<-data.Frame(patients,myMatrix)
myData<-data.frame(patients,myMatrix)
myData
class(myData)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(myData)<-cnames
myData
quit()
}
x <- 1:10
if(x > 5) {
x <- 0
}
}
cube <- function(x, n) {
x^3
}
cube <- function(x, n) {
x
cube(3)
;
q
quit()
?
cube <- function(x, n) {
x^3
}
cube <- function(x, n) {
x^3
}
cube <- function(x, n) {
x^3
}
/
cube <- function(x, n) {
x^3
}
cube(3)
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
swirl
library(swirl)
swirl
swirl()
swirl()
swirl()
x<-list(a=1:5, b=rnom(10))
x<-list(a=1:5, b=rnorm(10))
x
rnorm(1)
rnorm(1)
bnorm(1)
rbnorm(1)
norm(1)
norm(1,2,3)
norm(1,2,3,4)
norm(1,2)
norm([1,2])
x<-matrix[1,2]
x<-matrix(1,2)
x
x<-matrix(1,8)
x
x<-matrix(3,8)
x
x<-matrix(3,8,2)
x
norm(x)
rnorm(x)
dnorm(0)
dnorm(0)
dnorm(0)
x<-list(a=1:5, b=rnorm(10))
x
lapply(x, mean)
x<-list(a=1:5)
lapply(x, mean)
x<-1:5
lapply(x, mean)
x
x.as list
x as.list
as.list(x)
sapply(x, mean)
x
mean(x)
mean(1)
x<-1
sapply(x, mean)
mean(1)
x<-matrix(1:9,3,3)
x
apply(x,1,mean)
apply(x,1,sum)
apply(x,2,sum)
lapply(x,2,sum)
lapply(x,sum)
sapply(x,sum)
x<-1:24
dim(x)<-(2,3,4)
dim(x)<-c(2,3,4)
x
x<-1:48
dim(x)<-c(2,3,4,2)
x
x<-1:96
dim(x)<-c(2,3,4,2,2)
x
gl(3:10)
gl(3,10)
gl(3,rnum(10))
gl(3,rnum(10))
sample(10)
gl(3,sample(10))
x<-c(rnorm(10),runif(10),rnorm(10,1))
x
f<-sample(3)
f
f<-as.int(runif(10))
f<-as.integer(runif(10))
f
f<-as.integer(runif(10)*10)
f
tapply(x,f,mean)
f*3
f/3
f<-as.integer(runif(10)*10)
f
f<-c(f,f)
f
f<-as.integer(runif(10)*10)
f<-c(f,f,f)
f
tapply(x,f,mean)
f<-as.integer(runif(10)*30)
f
f<-as.integer(runif(30)*10)
f
tapply(x,f,mean)
library(datasets)
data(iris)
?iris
irs
iris
iris3
tapply(iris, $species, mean)
tapply(iris, species, mean)
tapply(iris, iris$species, mean)
tapply(iris, iris$Species, mean)
f<-iris$Species
tapply(iris, f, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
write.csv(iris,"c:\users\george\desktop\x.csv")
write.csv(iris,"c:/users/george/desktop/x.csv")
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars
)
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl[1], mean)
tapply(mtcars$hp, mtcars$cyl[$8], mean)
tapply(mtcars$hp, mtcars$cyl["$8"], mean)
tapply(mtcars$hp, mtcars$cyl$8, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
debug(ls)
ls
debug(ls)
ls
ls()
debug(ls)
debug
exit
quit
undebug(ls)
undebug(ls)
isdebugged(ls)
undebug
isdebug(ls)
isdebugged(ls)
mapply(rep, 1:4, 4:1)
rep 1
rep(1)
rep(1:2)
?rep
mapply(rep, 1:4, 4:1) symplify=TRUE)
mapply(rep, 1:4, 4:1 symplify=TRUE)
mapply(rep, 1:4, 4:1 Simplify=TRUE)
mapply(rep, 1:4, 4:1, Simplify=TRUE)
mapply(rep, 1:4, 4:1, Simplify=FALSE)
mapply(rep, 1:4, 4:1, Simplify=FALS)
source.with.encoding('~/GitHub/ProgrammingAssignment2/cachematrix.R', encoding='UTF-8')
source.with.encoding('~/GitHub/ProgrammingAssignment2/cachematrix.R', encoding='UTF-8')
rnorm(100)
x<-rnorm(100000)
x[100000]
x
tail(x, n=10)
count(x)
!is.na(x)
sum(!is.na(x))
x<-rnorm(1000000)
source('~/GitHub/GettingAndCleaningData1/run_analysis.R')
str(run_analysis.R')
str(run_analysis)
str(run_analysis.R)
x<-c(1:5)
x
summary(x)
str(x)
gl(2, 8, labels = c("Control", "Treat"))
library(nlme)
lme(fixed = y ~ 1, random = ~1|x1, data = p)
library(nlme)
lme(fixed = y ~ 1, random = ~1|x1, data = x("c","t")
)
library(nlme)
lme(fixed = y ~ 1, random = ~1|x1, data = c("c","t")
)
fm1 <- lme(distance ~ age, data = Orthodont) # random is ~ age
fm1
gl(2, 8, labels = c("Control", "Treat"))
gl(2, sample(8), labels = c("Control", "Treat"))
sample(8)
rnum
Random
randu
runif
runif()
runif(1)
runif(10)
runif(0)
runif(10,1,50)
rnorm(10)
sample(c('a','b'),10)
sample(c('a','b'),10, replace=TRUE)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(y)
x
e
plot(x,y)
Rprof()
lm(x)
x
plot(x,y)
by$total
by$total()
.by$total
by$total
$bytotal
byTotal
Rprof?
Rprof(NULL)
Rprof()
plot(x,y)
summaryRprof()
Rprof(NULL)
summaryRprof(plot(x,y))
Rprof()
plot(x,y)
$by.Total
$by.total
summaryRprof()
Rprof(NULL)
summaryRprof()
help set.seed
set.seed?
?set.seed
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
x<-download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",x)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",'datax')
x<-read.csv("datax")
x
x$wgtp
x <- c(as = "asfef", qu = "qwerty", "yuiop[", "b", "stuff.blah.yech")
# split x on the letter e
strsplit(x, "e")
x<-read.csv("datax")
x <- c(as = "asfef", qu = "qwerty", "yuiop[", "b", "stuff.blah.yech")
# split x on the letter e
strsplit(x, "wgtp")
x<-read.csv("datax")
strsplit(x, "wgtp")
strsplit(names(x), "wgtp")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",'datax')
strsplit(names(x), "wgtp"
datax$gdp
x<-read.csv("datax")
x$GDP
names(x)
x$2
x($2)
x[2]
x[0,2]
x
x$x.3
x$X.3
x$X.3
sub(",","",x$X.3)
x$X.3
sub("/,","",x$X.3)
sub("[,]",,x$X.3)
sub("[,]","[]",x$X.3)
x<-readtable("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
x<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
names(x)
x$VAL
x$VAL[x$VAL>24]
x$VAL[x$VAL==24]
sum(x$VAL[x$VAL==24])
!is.na(x$VAL[x$VAL==24])
sum(!is.na(x$VAL[x$VAL==24]))
x[1,1]
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
install.packages("knitr")
library(knitr)
setwd("C:\Users\George\Documents\GitHub\RepData_PeerAssessment1")
setwd("C:/Users/George/Documents/GitHub/RepData_PeerAssessment1")
DF<-read.csv("activity.csv")
DF
names(DF)
mean(steps)
mean(DF$steps)
mean(DF$steps, na.rm= TRUE)
print mean(DF$steps, na.rm= TRUE)
print(mean(DF$steps, na.rm= TRUE))
hist(steps)
hist(DF$steps)
tail(DF$steps)
tail(DF$steps, na.rm=TRUE)
head(DF$steps, na.rm=TRUE)
head(DF$steps)
head(DF$steps, n=20)
DFbyDay<-aggregate(DF, by DF$steps)
DFbyDay<-aggregate(DF, by="steps")
DFbyDay<-aggregate(DF, by="steps", sum)
DFbyDay<-aggregate(DF, FUN=sum, by="steps")
DFbyDay<-aggregate(DF, FUN=sum, by=steps)
DFbyDay<-aggregate(DF, FUN=sum, by=DF%steps)
DFbyDay<-aggregate(DF, FUN=sum, by=DF$steps)
names(DF)
DFbyDay<-aggregate(DF, FUN=sum, by=as.list(DF$steps)
)
x<-aggregate(steps ~ date, DF)
x<-aggregate(steps ~ date, DF, FUN=sum)
x
x<-aggregate(steps ~ date, DF, FUN=sum)
hist(x)
x
hist(x$date)
hist(x$steps)
mean(x$steps)
median(x$steps)
plot(DF$steps,x$steps, type="l")
plot(DF$steps,x$date,type="l")
plot(x$steps,x$date,type="l")
plot(x$steps,as.date(x$date),type="l")
plot(x$steps,as.Date(x$date),type="l")
plot(as.Date(x$date),x$steps,type="l")
x1<-aggregate(steps ~ date, DF, FUN=mean)
plot(as.Date(x1$date),x1$steps,type="l")
plot(as.Date(x1$date),x1$steps,type="l")
plot(x1$interval,x1$steps,type="l")
x1<-aggregate(steps ~ interval, DF, FUN=mean)
plot(x1$interval,x1$steps,type="l")
max(x1$steps)
which.max(x1$steps)
x1$interval[which.max(x1$steps)]
is.na[DF$steps]
is.na(DF$steps)
count(DF$steps)
sum(is.na(DF$steps))
sum(!is.na(DF$steps))
sum(!is.na(DF$intervals))
sum(!is.na(DF$interval))
sum(is.na(DF$interval))
sum(is.na(DF$date))
x2<-DF
x2[,steps]
x2[,$steps]
x2[,1]
merge(x2[,1],x1,by=intersect(interval(x2),interval(x1)))
merge(x2[,1],x1,by=intersect(x2$interval,x1$interval))
indx <- which(is.na(x2[, 1])==TRUE)
x2[indx]
x2[indx,]
x2[indx,$steps]
x2[indx,1]
x2[indx,1] <- x1$steps[which(x2[,interval])]
x2
names(x2)
which(x2[,interval])
x2[,interval]
x2[1,3]
x2[indx,1] <- x1$steps[which(x2[,3)]
x2[indx,1] <- x1$steps[which(x2[,3])]
which(x2[,3])
x2[indx,1] <- x1$steps[x2[,3]]
merge(x2[indx,],x1, by = "interval")
x2[indx,1] <- x1$steps[x1$interval==X2$interval]
x2[indx,1] <- x1$steps[x1$interval==x2$interval]
x2[indx,1] <- mean(DF$steps[DF$interval==x2$interval])
x2[indx,1]
x2[indx,1] <- x1$steps[x1$interval==x2$interval]
x2[indx,1] <- mean(x1$steps[x1$interval==x2$interval])
x2[indx,1]
x2[indx,1] <- mean(x1$steps[x1$interval==x2$interval])
mean(x1$steps[x1$interval==x2$interval])
mean(x1$steps[x1$interval==x2$interval],na.rm=TRUE)
x2[indx,1] <- mean(DF$steps[DF$interval==x2$interval],na.rm=TRUE)
x2[indx,1]
x2[indx,1] <- mean(DF$steps[which(DF$interval=x2$interval)],na.rm=TRUE)
x2[indx,1] <- mean(DF$steps[which(DF$interval==x2$interval)],na.rm=TRUE)
x2[indx,1]
x2[indx,1] <- x1$steps[which(x1$interval==x2$interval)]
x2[indx,1] <- mean(x1$steps[which(x1$interval==x2$interval)])
x2[indx,1]
x2[indx,1] <- mean(x1$steps[which(x1$interval==x2$interval)],na.rm=TRUE)
x2[indx,1]
x2[indx,1] <- mean(x1$steps[which(x1$interval==[indx,3]),na.rm=TRUE)
x2[indx,1] <- mean(x1$steps[which(x1$interval==x2[indx,3]),na.rm=TRUE)
x2[indx,1] <-x1$steps[which(x1$interval==x2[indx,3])]
x2[indx,1]
x2[indx,1] <-x1$steps[which(x1$interval==x2[indx,3]),na.rm=TRUE]
x2[indx,1] <-x1$steps[x1$interval==x2[indx,3]]
x2[indx,1]
x2[indx,1] <-mean(x1$steps[x1$interval==x2[indx,3]],na.rm=TRUE)
x2[indx,1]
x2[indx,1] <-mean(x1$steps[x1$interval==x2[indx,3]],na.rm=TRUE)
DF1<-cbin(DF, weekdays(DF$date))
DF1<-cbind(DF, weekdays(DF$date))
weekdays(DF$date)
weekdays.date(DF$date)
weekdays.Date(DF$date)
weekdays(as.Date(DF$date))
DF2<-cbind(DF,weekdays(as.Date(DF$date)))
names(DF2)
names(DF2,4)
names(DF2)[4]<-DayofWeek
names(DF2)[4]<-"DayofWeek""
names(DF2)[4]<-"DayofWeek"
names(DF2)
names(DF2)[4]<-"DayofWeek"
xweekday<-aggregate(steps ~ interval, DF[DF$DayofWeek!="Sunday" & DF$DayofWeek!="Saturday"], FUN=mean)
xweekday<-aggregate(steps ~ interval, DF2[DF2$DayofWeek!="Sunday" & DF2$DayofWeek!="Saturday"], FUN=mean)
xweekday<-aggregate(steps ~ interval, DF2[DF2$DayofWeek!="Sunday" & DF2$DayofWeek!="Saturday"], FUN=mean)
DF2[DF2$DayofWeek!="Sunday" & DF2$DayofWeek!="Saturday"]
DF2[DF2$DayofWeek!="Sunday"]
DF2
DF2[DF2$3 != "Sunday"]
names(DF2)
DF2[,DF2$DayofWeek!="Sunday"]
class(DF2)
DF2[,DF2[DF2$DayofWeek!="Sunday"]]
DF2[,DF2[DF2$DayofWeek=="Sunday"]]
DFwd<-DF2[which(DF2$DayofWeek!="Sunday" & DF2$DayofWeek!="Saturday")]
DFwd<-DF2[,which(DF2$DayofWeek!="Sunday" & DF2$DayofWeek!="Saturday")]
DFwd<-DF2[which(DF2$DayofWeek!="Sunday" & DF2$DayofWeek!="Saturday"),]
DFwd
DFwd<-DF2[which(DF2$DayofWeek=="Sunday" | DF2$DayofWeek=="Saturday"),]
DFwd
plot(DFwd$interval,DFwd$steps,type="l")
par(mfrow=c(2,1))
plot(DFwd$interval,DFwd$steps,type="l")
plot(DFwe$interval,DFwe$steps,type="l")
DFwe<-DF2[which(DF2$DayofWeek=="Sunday" | DF2$DayofWeek=="Saturday"),]
plot(DFwe$interval,DFwe$steps,type="l")
